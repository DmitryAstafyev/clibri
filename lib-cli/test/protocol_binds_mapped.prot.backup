# Example of identification object
@Identification{
    consumer {
        str uuid;
        u64 id;
        str location;
    }
    producer {
        str uuid;
        bool auth;
    }
}

# Example of request with implementation
struct UserSignInRequest {
    str login;
    str hash;
    u64 timestamp;
} > struct UserSignInResponse {
    str error?;
} : (Accept)    > accept;
                > broadcast:struct UserAccepted {
                      str login;
                  };
  : (Deny)      > deny;



# Example of request, just declaration
struct UserAccepted {
    str login;
}

struct UserSignInRequest {
    str login;
    str hash;
    u64 timestamp;
}

struct UserSignInResponse {
    str error?;
}

UserSignInRequest > UserSignInResponse
   : (Accept) > accept;
              > broadcast: UserSignInBroadcast;
   : (Deny)   > deny;

# Conclusion before response
UserSignInRequest > (Accept, Deny) > UserSignInResponse
   : (Accept) > accept;
              > broadcast: UserSignInBroadcast;
   : (Deny)   > deny;



# Example of consumer event
struct UserSignOut {
    str login;
    u64 timestamp;
}: (Done) > accept;
          > broadcast: struct UserSignOutBroadcast {
                str login;
            };


For each conclution should be own response
For any request should be always defined error response

UserSignInRequest[UserSignInError]
   : (Accept -> UserSignInAccepted) > accept;
                                    > broadcast: UserSignInBroadcast;
   : (Deny -> UserSignInDenied)     > deny;

Same example but using groups
UserSignIn {
    Request[Error]
        : (Accept -> Accepted) > accept;
                               > broadcast: UserSignInBroadcast;
        : (Deny -> Denied)     > deny;
}


# Broadcast version

@broadcasts {
    struct UserDisconnected {
        str login;
        u64 timestamp;
    }
}